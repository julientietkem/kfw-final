image: node:20-alpine

stages:
  - setup
  - lint
  - test
  - build
  - deploy

variables:
  NEXT_PUBLIC_SITE_URL: ${CI_PAGES_URL}
  NODE_OPTIONS: "--max-old-space-size=4096"

# Cache dependencies across jobs
cache:
  key:
    files:
      - package-lock.json
  paths:
    - .npm/
    - node_modules/

# Install dependencies
setup:
  stage: setup
  script:
    - npm ci --cache .npm --prefer-offline
  artifacts:
    paths:
      - node_modules/

# Lint code
lint:
  stage: lint
  needs:
    - setup
  script:
    - npm run lint
    - npm run check-types

# Run unit tests
test:unit:
  stage: test
  needs:
    - setup
  script:
    - npm run test
  artifacts:
    reports:
      junit: junit.xml
    paths:
      - coverage/
    when: always

# Build the application 
build:
  stage: build
  needs:
    - lint
    - test:unit
  script:
    - npm run build
  artifacts:
    paths:
      - .next/
      - public/
    expire_in: 1 week

# Deploy to staging
deploy:staging:
  stage: deploy
  needs:
    - build
  environment:
    name: staging
    url: https://staging.example.com
  script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - npm run build
    - |
      echo "Deploying to staging server..."
      # Replace with your actual deployment commands
      # Example: rsync -avz --delete .next/ user@staging-server:/path/to/app/.next/
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

# Deploy to production
deploy:production:
  stage: deploy
  needs:
    - build
  environment:
    name: production
    url: ${VERCEL_PRODUCTION_URL}
  script:
    - npm install --global vercel
    - vercel pull --yes --environment=production --token=$VERCEL_TOKEN
    - vercel build --prod --token=$VERCEL_TOKEN
    - vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual